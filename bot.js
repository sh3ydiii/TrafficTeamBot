import Bot from 'node-telegram-bot-api'
import fs from 'fs'
import dotenv from 'dotenv'


dotenv.config()

const bot = new Bot(process.env.BOT_TOKEN, { polling: true })

import { examination } from './controller/subscribe.js'
import { userLoad, userSave } from './controller/user.js'
import { menu, profile, referals, stats, information, system } from './controller/menu.js'
import {adminMenu, generateStatsAll, generateStatsUser, sendStatsToAdmin} from './controller/admin.js'

const adminChat = '-1002446202758';
const adminChatIds = ['8098508247','7799783748'];  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π adminChatId
let userState = {};  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
const userResponses = {}

async function sendMessageToAllUsers(message) {
    const users = userLoad();
    for (const userId in users) {
        try {
            await bot.sendMessage(userId, message);
        } catch (error) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
        }
    }
}
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const referrerId = match[1].trim();

    const users = userLoad(bot);
    delete userState[chatId]

    if (adminChatIds.includes(chatId.toString())) {
        adminMenu(bot, chatId)
    } else if (users[chatId] && users[chatId].status != 'blocked') {
        menu(bot, chatId);
    } else if (!users[chatId]) {
        if (referrerId && users[referrerId]) {
            if (!users[referrerId].refs.includes(chatId)) {
                users[referrerId].refs.push(chatId);
                users[referrerId].balance += 0.6;
                users[referrerId].balanceAll += 0.6
                userSave(users);
            }
        }

        const sponsors = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîî 1 –°–ü–û–ù–°–û–†', url: 'https://t.me/sh3ydii' },
                        { text: 'üîî 2 –°–ü–û–ù–°–û–†', url: 'https://t.me/sh3ydii' }
                    ],
                    [{ text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data: `ankets_${chatId}` }]
                ]
            }
        };

        bot.sendPhoto(chatId, './image/main.jpg', {
            caption: '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!',
            ...sponsors
        });

    } else if (users[chatId].status === 'blocked') {
        bot.sendMessage(chatId, '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!')
    }
});

async function askQuestion(chatId, questionIndex) {
    const answer = [
        '1. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?',
        '2. –ó–Ω–∞–∫–æ–º—ã —Å –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞?',
        '3. –°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞–ª–∏–≤–∞–µ—Ç–µ –≤ –¥–µ–Ω—å?'
    ];

    if (questionIndex < answer.length) {
        bot.sendMessage(chatId, answer[questionIndex]);
        userState[chatId] = { step: 'answer', questionIndex }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    } else {
        const adminMsg = `
        <b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞! <code>${chatId}</code></b>

1. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç: ${userResponses[chatId][0]}
2. –ó–Ω–∞–∫–æ–º—ã —Å –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞: ${userResponses[chatId][1]}
3. –°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞–ª–∏–≤–∞–µ—Ç–µ –≤ –¥–µ–Ω—å: ${userResponses[chatId][2]}


        `
        bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã!–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è');
        bot.sendMessage(adminChat, adminMsg, {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_${chatId}`}]
                ]
            },
            parse_mode: 'HTML'
        })
        delete userResponses[chatId]; // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        delete userState[chatId]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
}

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const callbackData = query.data;
    const [action, id] = callbackData.split('_');

    const users = userLoad(bot, chatId)

    if (action === 'ankets') {
        const isSubscribed = await examination(bot, chatId);

        if (isSubscribed) {
        userResponses[chatId] = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        await askQuestion(chatId, 0); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        } else {
            bot.sendMessage(id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.');
        }
    }
    
    if (action === 'accept') {
        bot.deleteMessage(chatId, query.message.message_id);

        if (!users[id]) {
            users[id] = {
                balance: 0,
                balanceAll: 0,
                link: `https://t.me/dfdffdfsse233Bot?start=${id}`,
                refs: [],
                status: {}
            }
            userSave(users);
        }
        // bot.sendMessage(id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã)\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WINZER TEAM :)')
        menu(bot, id)
        return;
    }

    if (action === 'link') {
        const users = userLoad(bot, chatId)
        bot.deleteMessage(chatId, query.message.message_id);
        bot.sendMessage(chatId, `<b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>\n${users[id].link}`, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ú–µ–Ω—é', callback_data: 'back_to_menu' }]
                ]
            }
        })
    }

})

bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id
    const data = query.data

    if (data === 'back_to_menu') {
        bot.deleteMessage(chatId, query.message.message_id);
        menu(bot, chatId)
    }

    if (data === 'profile') {
        bot.deleteMessage(chatId, query.message.message_id)
        profile(bot, chatId)
    }

    if (data === 'referals') {
        bot.deleteMessage(chatId, query.message.message_id)
        referals(bot, chatId)
    }

    if (data === 'stats') {
        bot.deleteMessage(chatId, query.message.message_id)
        stats(bot, chatId)
    }

    if (data === 'information') {
        bot.deleteMessage(chatId, query.message.message_id)
        information(bot, chatId)
    }

    if (data === 'system') {
        bot.deleteMessage(chatId, query.message.message_id)
        system(bot, chatId)
    }

    if (adminChatIds.includes(chatId.toString())) {
        if (data === 'user_balance') {
            bot.deleteMessage(chatId, query.message.message_id);
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ Id —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12345 100):');
            userState[chatId] = { step: 'getNewBalance' };  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        }

        if (data === 'delete_user') {
            bot.deleteMessage(chatId, query.message.message_id);
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
            userState[chatId] = { step: 'deleteUser' };
        }

        if (data === 'unblocked_user') {
            bot.deleteMessage(chatId, query.message.message_id)
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:')
            userState[chatId] = { step: 'unblockedUser'}
        }

        if (data === 'messageAllUsers') {
            bot.deleteMessage(chatId, query.message.message_id)
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
            userState[chatId] = { step: 'messageAllUsers'}
        }

        if (data === 'statsAll') {
            const users = userLoad()
            const statsAll = generateStatsAll(users);
            const fileName = './stats_all.txt';
            sendStatsToAdmin(bot, chatId, statsAll, fileName);
        } 
        
        if (data === 'statsUser') { 
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É,–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:');
            userState[chatId] = {step: 'IdStats'}
        }
    }
})

bot.on('callback_query', async (query) => {
    const { id, data, message } = query;  

    if (data === 'finance') {
        await bot.answerCallbackQuery(id, {
            text: '–í—ã–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è \n—Å—É–±–±–æ—Ç–∞ - –≤—Å–∫\n–° 15:00 - 18:00 –º—Å–∫\n\n–ü–æ –ø–æ–≤–æ–¥—É –≤—ã–ø–ª–∞—Ç–µ: @Traffer096',  
            show_alert: true  
        });
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;

    if (userState[chatId] && userState[chatId].step === 'answer') {
        const questionIndex = userState[chatId].questionIndex; // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        userResponses[chatId][questionIndex] = msg.text.trim(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await askQuestion(chatId, questionIndex + 1); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    }
    if (userState[chatId] && userState[chatId].step === 'IdStats') {
        const idStats = msg.text.trim()
        const users = userLoad()
        const statsUser  = generateStatsUser(idStats, users);
        const fileName = `./src/stats_${idStats}.txt`;
        sendStatsToAdmin(bot, chatId, statsUser , fileName);

        delete userState[chatId]
    }
    if (userState[chatId] && userState[chatId].step === 'messageAllUsers') {
        const msgUsers = msg.text.trim();
    
        sendMessageToAllUsers(msgUsers)
        bot.sendMessage(chatId, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!')
        delete userState[chatId]
    }

    if (userState[chatId] && userState[chatId].step === 'deleteUser') {
        const userId = msg.text.trim();

        const users = userLoad(bot);
        if (!isNaN(userId) && !users[userId].status ) {
            users[userId].status = 'blocked';
            userSave(users);
            await bot.sendMessage(userId, '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!'); 
            await bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
            try {
                await bot.deleteMessage(chatId, userState[chatId].msgId);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            }
        } else {
            await bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
        }
    
        delete userState[chatId]; 
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if (userState[chatId] && userState[chatId].step === 'unblockedUser') {
        const userId = msg.text.trim();

        const users = userLoad(bot);
        if (!isNaN(userId) && users[userId].status === 'blocked') {
            users[userId].status = '';
            userSave(users);
            await bot.sendMessage(userId, '–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.');
            await bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
        } else {
            await bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ ID
        try {
            await bot.deleteMessage(chatId, userState[chatId].requestMessageId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
        } catch (deleteError) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, deleteError.message);
        }

        delete userState[chatId]; 
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—Ä–æ—Å–∞ ID –∏ –±–∞–ª–∞–Ω—Å–∞
    if (userState[chatId] && userState[chatId].step === 'getNewBalance') {
        const input = msg.text.trim();
        const [workerId, newBalanceText] = input.split(' ');  // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª—É

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–µ —á–∞—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω—ã
        if (!workerId || !newBalanceText) {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: "12345 100".');
            return;
        }

        const newBalance = parseFloat(newBalanceText); 

        if (isNaN(newBalance)) {
            bot.sendMessage(chatId, '–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑.');
            return;
        }

        const users = userLoad(bot); 
        if (users[workerId]) {
            users[workerId].balance = newBalance;
            userSave(users)

            bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ —Å ID ${workerId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newBalance}`);
        } else {
            bot.sendMessage(chatId, `–†–∞–±–æ—Ç–Ω–∏–∫ —Å ID ${workerId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
        }

        delete userState[chatId];
    }
});

bot.onText(/\/send_message (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const message = match[1];

    if (adminChatIds.includes(chatId.toString())) {
        sendMessageToAllUsers(message)
            .then(() => {
                bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
            })
            .catch(error => {
                bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            });
    } else {
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }
});